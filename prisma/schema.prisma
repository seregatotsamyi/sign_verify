generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String               @unique
  password           String
  image              String?
  emailVerified      DateTime?            @map("email_verified")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isAdmin            Boolean              @default(false)
  accounts           Account?
  sessions           Session[]
  verificationResult VerificationResult[]

  @@map("users")
}

model VerificationResult {
  id                String   @id @default(uuid())
  userId            String
  result            Boolean
  documentName      String
  signatureType     String
  signatureTime     String
  issuerName        String
  notAfter          String
  notBefore         String
  subjectName       String
  scopeSerialNumber String
  thumbprint        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@map("verification_results")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
